Changes in 1.5
==============================================

Changes that Could Break Older Environments:
--------------------------------------------


        The coordinates inside the Ivy file have been changed to match
        those of the POM.
      

        The Apache Compress Antlib now requires Apache Commons
        Compress 1.14 or later for 7z, DEFLATE, LZ4 and write support
        for LZMA and Snappy.
        XZ for Java 1.6 or later is required for write support for LZMA.
        Brotli dec 0.1.2 or later is required for Brotli support.
        As a side effect the Compress Antlib now requires Java 7 at
        runtime as this is required by Commons Compress 1.14.
      
Fixed Bugs:
-----------

Other Changes:
--------------


        A new keepCompression flag can be used to keep the content
        compression methods the same they have been when updating a 7z
        archive or adding entries from a sevenzfileset.
      

        Multiple content compression/encryption/filter methods can now
        be specified via nested elements of the sevenz task.
      

        The gzip task has a new attribute that controls the level of
        compression.
      
        BugZilla Issue 52414
      

        Added write support for the LZMA format.
      

        Added support for the DEFLATE format with and without ZLIB headers.
      

        Added write support for the Snappy format.
      

        Added support for the LZ4 format.
      

        Added read-only support for the Brotli format.
      

Changes in 1.4
==============================================

Changes that Could Break Older Environments:
--------------------------------------------


        The Apache Compress Antlib now requires Apache Commons
        Compress 1.7 if you want to work with Snappy or .Z compressed
        resources.
      
Fixed Bugs:
-----------

Other Changes:
--------------


        Read-only support for traditional Unix Compress (.Z) has been
        added.
      

        Read-only support for Snappy compression has been added.
      

Changes in 1.3
==============================================

Changes that Could Break Older Environments:
--------------------------------------------


        The Apache Compress Antlib now requires Apache Commons
        Compress 1.6 if you want to work with arj or 7z archives.

        In addition XZ for Java 1.4 is required if you want to
        read/write 7z archives using LZMA(2) compression or
        stand-alone LZMA files.
      
Fixed Bugs:
-----------

Other Changes:
--------------


        Encoding support for dump and cpio archives and filesets.
      

        Read-only support for uncompressed arj archives has been added.
      

        Read-only support for LZMA standalone compression has been
        added.
      

        Support for file based 7z archives has been added.
      

Changes in 1.2
==============================================

Changes that Could Break Older Environments:
--------------------------------------------


        The Apache Compress Antlib now requires Apache Commons
        Compress 1.4 and the public domain XZ for Java library if you
        want to use the XZ format.

        Commons Compress 1.4 is also required for the GNU, STAR and
        PAX formats of the tar task.
      

        The tar and untar tasks as well as the tar related resources
        now allow the encoding for file names to be specified.  The
        default is the platform's native encoding, it used to be
        ISO-8859-1 in Commons Compress 1.3 and thus the Compress
        Antlib 1.1.
      
Fixed Bugs:
-----------

Other Changes:
--------------


        Support for xz compression has been added.
      

        The gunzip and bunzip2 tasks as well as the corresponding
        resources now support uncompressing resources that contain
        multiple concatenated streams as a single stream.  This
        behavior has to be enabled explicitly via the
        decompressConcatenated attribute.
      

        The tar task now supports the POSIX 1003.1/PAX way of storing
        long file names used by most modern tar implementations.
      

        The tar resources and the untar task read entries bigger than
        8 GByte transparently now, if you use Commons Compress 1.4.
      

        The tar task writes entries bigger than 8 GByte using POSIX
        1003.1/PAX headers or the star extension if you set the format
        attribute to "star", "gnu" or "pax".  See the tar task's
        documentation of details.
      

Changes in 1.1
==============================================

Changes that Could Break Older Environments:
--------------------------------------------


        The Apache Compress Antlib now requires Apache Commons
        Compress 1.3 which in turn requires Java5 at runtime.
        This change allows the Compress Antlib to support Zip64
        extensions.
      
Fixed Bugs:
-----------

Other Changes:
--------------


        Support for pack200 compression has been added.
      

        The new pack200normalize task allows you to prepare JAR
        archives so they can be signed and compressed with pack200 and
        the signature will still be valid after uncompressing them
        again.
      

        Read-only support for the Unix dump format has been added in
        the form of an <undump> task and corresponding
        <dumpentry> and <dumpfileset> resources.
      

        A new attribute zip64Mode provides finer grained control over
        whether Zip64 extensions will be used in the <zip> task.
      

        The <zip> task has a new attribute zip64Mode that
        controls whether Zip64 extended information is written to the
        archive.
      

        The <ar> task now optionally suppports writing entries
        with names longer than 16 characters using the BSD variant of
        AR archives.
      

        The unarchiving tasks and fileset types share a new attribute
        skipUnreadableEntries that can be used to ignore archive
        entries that Apache Commons Compress knows it cannot handle
        (like encrypted ZIP entries or sparse files in GNU tar
        archives).
      

        The preserveLeadingSlashes attribute of the <tar> task
        now works as expected.
      

